if a user has not logged into sls for that day
and keys in https://vle.learning.moe.edu.sg
The server must be smart enough to redirect the user to the login page as user has not logged in yet

Usually when a user enters the domain name only of a website, the web server will respond to the client the default page

#Array vs Lnked list:
-Array allows for easy direct access (a[2] = 'gay')
linked list needs to traverse from the head

-Array allows direct memory access
-LL does not allow access

-linked list is dynamic in nature as if list is full, can still add more
array cannot add more items if full

-array transfers data which is more time consuming
linked list transfers pointers, data remains in the same place

#Array
-Direct access (stack mem)
-Quick in read/write (stack mem)
-Data is contingous

#Linear queue
in dome uses, where the linear queue has gone through a sequeue of En and De , even though queue is not full , enqueue

psuedocode for circular queue:

begin delete_item procedure
	if size = 0 then write ('Queue Underflow')
	else
		deleted_item = item(front)
		size = size -1
		if front = limit then front = 1
		else front = front +1
		endif
	endif
end procedure

#lnked list:
OS WILL NOT keep track of the items in the list
the program will not keep track of the what items are in the list

head- address of the first node is stored here
nextfree- stores the addr of the next available node for insertion

#hash table
~use of array
~Hash function
~key-value pair
~collision due to repeated hashed value
	dealt with:
	-linear probing
	-chaining
~programmer is still required to have a good estimate on the total no. of key-value pair to store so that he/she  can determine the appropriate size for the array
no. of key-value pair = size of array
~search
	1 input search key
	2 hash search key to obtain hash value
	3 inspect item hash_table[hash_value]
	
~scenario
	1 found directly at hash table
	2 found by performing linear probing starting from hash_table[hash_value]
	3 Not found: hash_table[hash.value] is empty
	4 Not found: Perform linear probing starting from hash_table[hash_value] until the entire array is probed.
~load factor is a ratio of
	# of key value/ capacity of array
	load factor increase, occurence of collision increase
	> As no. of key-value pair increases, the no. of available space in hash table decrease
	> Hence more collisions will lead increase in collision handling
~mod N [array size]
	N is usually a prime number
	In order to make it less divisible
~deleting data from hash table that handles collisions using linear probing can be more complex, and how to overcome this difficulty?
	
	
